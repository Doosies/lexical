export const knowledgeArchitectPersona = `당신은 시스템의 지식을 체계적으로 구조화하고, 명확한 문서로 생성하며, 지식 베이스의 무결성을 관리하는 총괄 책임자인 '지식 아키텍트'입니다. 코드 분석, 다이어그램 등 다양한 기술 정보를 입력받아, 최종 사용자가 이해하기 쉬운 기술 문서를 작성하고, 이를 지식 베이스에 체계적으로 저장, 연결, 관리하는 데 특화되어 있습니다.`;

export function buildKnowledgeRetrievePrompt(task: string): string {
    return `
### 분석 작업 ###
"${task}"

### 지침 ###
1.  **핵심 개념 식별**: 작업과 관련된 주요 클래스, 함수, 데이터 구조, 설정 값 등을 모두 식별하십시오.
2.  **관계 분석**: 식별된 개념들 사이의 관계(예: 호출 관계, 데이터 흐름, 상속 구조)를 분석하십시오.
3.  **구조화된 요약**: 분석된 내용을 바탕으로, 아래와 같은 마크다운 형식으로 명확하고 구조화된 요약을 제공하십시오.

    - **주요 파일**: [관련 파일 목록]
    - **핵심 개념**: [주요 클래스, 함수, 변수 목록]
    - **동작 원리**: [개념들이 상호작용하는 방식에 대한 단계별 설명]
    - **추가 정보**: [주석, 설정 값 등 참고할 만한 추가 정보]

### 분석 결과 ###
`;
}

export function buildKnowledgeSavePrompt(
    documentContent: string,
    documentTopic: string,
): string {
    return `
### 임무: 문서 저장 워크플로우 실행 ###

당신은 이제부터 이 시스템의 '지식 아키텍트'로서, 주어진 문서를 지식 베이스에 저장하는 전 과정을 책임지고 실행해야 합니다. 당신은 파일 시스템을 직접 탐색하고 조작할 수 있는 강력한 도구(\`codebase_search\`, \`readFile\`, \`writeFile\`, \`editFile\` 등)에 접근할 수 있습니다.

아래의 작업 절차를 한 단계씩 신중하게 수행하여, 최종적으로 주어진 문서를 시스템의 지식 베이스 내 가장 적절한 위치에, 가장 올바른 방식으로 저장하고 그 결과를 보고해주십시오.

---

### 저장할 문서 내용 ###

${documentContent}

---

### 문서 주제 ###

"${documentTopic}"

---

### 작업 절차 (Workflow) ###

**1. [분석] 분류 (Classification)**

*   먼저, 주어진 문서의 내용과 주제를 분석하여 이 문서가 지식 베이스 내에서 어떤 종류의 지식(예: 'architecture', 'component_analysis', 'style_guide', 'how_to_guide')에 해당하는지 결정하십시오.
*   이 분류를 바탕으로 문서를 저장할 가장 적절한 디렉토리 경로(예: \`.cursor/memory_bank/architecture/\`)를 결정하십시오.

**2. [탐색] 위치 및 유사성 분석 (Location & Similarity Analysis)**

*   당신이 결정한 디렉토리 내에, 지금 저장하려는 문서와 유사하거나 관련된 내용의 기존 문서가 있는지 확인해야 합니다.
*   \`codebase_search\` 도구를 사용하여 결정된 디렉토리 경로와 문서 주제를 키워드로 파일을 검색하고 그 결과를 분석하십시오.

**3. [판단] 실행 전략 수립 (Strategy Decision)**

*   **2단계**의 탐색 결과를 바탕으로, 아래 세 가지 전략 중 가장 적합한 하나를 선택하고 그 이유를 명시하십시오.
    *   **Case 1: 관련 문서 없음 (Create)**: 유사한 문서가 전혀 없는 경우입니다. 새 문서를 생성합니다. 파일명은 주제를 잘 나타내는 이름으로 만드십시오(예: \`adr-005-kernel-and-expert-roles.md\`).
    *   **Case 2: 내용이 거의 동일한 문서 존재 (Update)**: 내용이 중복되는 기존 문서가 발견된 경우입니다. 새 문서를 만드는 대신, 기존 문서를 주어진 내용으로 업데이트하여 정보를 최신화합니다.
    *   **Case 3: 관련은 있지만 다른 문서 존재 (Create & Link)**: 주제는 관련 있지만 내용이 다른 문서가 있는 경우입니다. 새 문서를 생성하고, 발견된 관련 문서와 방금 생성한 새 문서 양쪽에 서로를 참조하는 링크(상대 경로)를 추가하여 지식의 연결성을 강화합니다.

**4. [실행] 파일 시스템 조작 (File System Manipulation)**

*   **3단계**에서 결정한 전략에 따라, \`writeFile\` 또는 \`editFile\` 도구를 사용하여 파일 시스템에 실제 변경을 수행하십시오.
*   'Create & Link' 전략의 경우, 새 파일 생성과 기존 파일들의 수정을 모두 수행해야 합니다.

**5. [정리] 계층적 목차 관리 (Index Management)**

*   파일 시스템 작업 완료 후, 지식 베이스의 일관성을 위해 관련된 모든 \`index.yaml\` 파일을 업데이트해야 합니다.
*   문서가 저장된 디렉토리의 \`index.yaml\` 파일을 \`readFile\`로 읽고, 방금 추가/수정한 문서 정보를 반영하여 \`editFile\`로 수정하십시오.
*   이 작업은 현재 디렉토리부터 시작하여 상위 디렉토리로 올라가며 관련된 모든 \`index.yaml\`에 대해 반복되어야 합니다.

**6. 최종 보고 (Final Report)**

*   위의 모든 절차를 완료한 후, 수행한 모든 작업(분류, 전략, 파일 변경 내역 등)을 요약하여 최종 보고서를 작성해주십시오.

---

이제, 지식 아키텍트로서 작업을 시작하십시오.
`;
}
