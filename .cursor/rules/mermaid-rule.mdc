---
rule_id: 'mermaid-rule'
title: 'Mermaid 핵심 규칙 및 스타일 가이드 (v3.0)'
description: 'Mermaid 다이어그램 생성을 위한 핵심 문법, 구조, 디자인 시스템 가이드. 이 규칙은 모든 Mermaid 다이어그램 유형에 공통적으로 적용됩니다.'
trigger_keywords:
  - 'diagram'
  - 'mermaid'
  - 'visualize'
  - '다이어그램'
  - '도식화'
  - '시각화'
  - '그려줘'
verification_checklist:
  - '에러 없이 정상적으로 렌더링 되는가?'
  - '모든 노드 텍스트는 큰따옴표(`"`)로 감싸져 있는가?'
  - 'ID 네이밍 규칙(공백/특수문자 금지)을 준수하는가?'
  - '정의된 `classDef` 스타일만 사용하는가? (커스텀 색상 금지)'
  - '노드 선언과 관계 연결은 분리되어 있는가?'
---

# Mermaid 핵심 규칙 및 스타일 가이드 (v3.0)

이 문서는 AI가 모든 종류의 Mermaid 다이어그램을 생성할 때 일관성과 가독성을 유지하기 위해 반드시 준수해야 하는 **핵심 원칙과 디자인 시스템**을 정의합니다. 규칙을 간소화하여 유연성을 높이는 데 초점을 맞춥니다.

---

## 0. 생성 가능한 다이어그램 종류 (Available Diagram Types)

이 가이드는 아래와 같이 다양한 유형의 다이어그램을 생성하는 데 공통적으로 적용됩니다. 사용자의 요구사항을 가장 잘 표현할 수 있는 다이어그램을 선택하여 아래 규칙에 따라 생성합니다.

- **프로세스 및 순서 (Process & Flow)**

  - **`Flowchart`**: 작업 흐름, 로직, 의사결정 구조를 시각화합니다.
  - **`Sequence Diagram`**: 시스템 컴포넌트 간의 상호작용과 메시지 순서를 표현합니다.
  - **`Gantt Chart`**: 프로젝트 일정과 작업 기간을 시각적으로 계획합니다.
  - **`User Journey`**: 사용자의 경험 여정을 단계별로 보여줍니다.
  - **`State Diagram`**: 시스템이나 객체의 상태와 그 전환을 모델링합니다.

- **데이터 및 관계 (Data & Relationships)**

  - **`Class Diagram`**: 객체 지향 시스템의 클래스, 속성, 관계를 정의합니다.
  - **`Entity Relationship Diagram`**: 데이터베이스의 엔티티와 관계를 모델링합니다.
  - **`Pie Chart`**: 전체에 대한 각 부분의 비율을 보여줍니다.
  - **`XY Chart`**: X-Y 좌표계를 이용해 데이터를 시각화합니다. (라인, 바, 스캐터)
  - **`Sankey`**: 여러 경로 간의 유량이나 흐름을 시각화합니다.

- **아키텍처 및 구조 (Architecture & Structure)**
  - **`Block Diagram`**: 계층적인 블록으로 시스템의 구성 요소를 자유롭게 표현합니다.
  - **`C4 Diagram`**: 소프트웨어 아키텍처를 4단계(Context, Container, Component, Code)로 시각화합니다.
  - **`Mindmap`**: 중심 아이디어를 기준으로 생각을 방사형으로 확장합니다.
  - **`GitGraph`**: Git 브랜치와 커밋 히스토리를 시각화합니다.

## 1. 핵심 문법 원칙 (Core Syntax Principles)

### 1.1. ID와 텍스트(레이블) 구분

- **ID**: 노드를 식별하는 고유한 이름. **따옴표 없이** 영문, 숫자, `-`, `_`만 사용합니다.
  - ✅ `user_service`, `db-1`
  - ❌ `사용자 서비스`, `"user service"`
- **텍스트(레이블)**: 노드에 표시되는 내용. **반드시 큰따옴표(`"`)**로 감쌉니다.
  - ✅ `A["사용자 서비스"]`

### 1.2. 특수 문자 이스케이프

- 노드 텍스트에 '< > `' 문자가 포함될 경우, 반드시 이스케이프 처리합니다.
  - `<` → `&lt;`
  - `>` → `&gt;`
  - ``` -> `\``
  - 숫자 목록의 점(`.`) → `\.`
  - ✅ `A["&lt;GenericComponent&gt;"]`
  - ✅ `subgraph "1\. 첫 번째 단계"`

### 1.3. 주석

- 설명이 필요한 경우 `%%`를 사용하여 **독립된 줄에** 주석을 작성합니다.
  - ✅ `%% This is a comment`

### 1.4. 목록 표현

- 노드 텍스트나 `subgraph` 제목 등에서 단계별 목록을 표현할 때는, 중첩 수준에 따라 다음과 같이 일관된 형식을 사용합니다.
  - **1단계**: `1\.`, `2\.`, `3\.`
  - **2단계**: `1-1\.`, `1-2\.`, `2-1\.`
  - ✅ `subgraph "2-1\. 세부 실행"`
  - ✅ `A["1\. 사용자 입력<br/>2\. 데이터 처리"]`

---

## 2. 구조화 원칙 (Structuring Principles)

### 2.1. 선언과 연결 분리

- **원칙**: 모든 노드(`node`)와 그룹(`subgraph`) 선언을 먼저 하고, 관계 연결(`-->` 등)은 코드 블록의 최하단에 모아서 작성합니다.
- **이유**: 구조 파악이 쉽고, 유지보수가 용이해집니다.

```mermaid
graph TD
    %% 1. 모든 노드 선언
    subgraph "서비스"
        A["API Gateway"]
        B["User Service"]
    end
    C[("Database")]

    %% 2. 관계 연결은 하단에
    A --> B
    B --> C
```

---

## 3. 디자인 시스템 (Design System)

다크(Dark) 테마 환경에서의 가독성과 통일성을 위해 사전 정의된 스타일 클래스만 사용합니다. **커스텀 색상 사용은 금지됩니다.**

### 3.1. 표준 스타일 클래스 (`classDef`)

| 역할                | 클래스명    | 색상 계열 |
| :------------------ | :---------- | :-------- |
| **핵심/진입점**     | `primary`   | 파란색    |
| **내부 컴포넌트**   | `component` | 청록색    |
| **외부 시스템/API** | `external`  | 보라색    |
| **데이터베이스**    | `db`        | 주황색    |
| **조건문/분기**     | `decision`  | 녹색      |
| **입력/출력**       | `io`        | 자주색    |
| **경고/오류**       | `warning`   | 붉은색    |
| **기본 노드**       | `default`   | 회색      |

### 3.2. 스타일 적용 문법

- `classDef`로 표준 스타일을 먼저 정의한 후, `:::` 연산자로 노드에 적용합니다.

```mermaid
graph TD
    %% 1. 스타일 클래스 정의
    classDef primary fill:#2E6E9E,stroke:#1C4E7A,color:#fff
    classDef db fill:#A86D3A,stroke:#884D1A,color:#fff

    %% 2. 노드 선언 및 스타일 적용
    A(["프로세스 시작"]):::primary
    B[("사용자 DB")]:::db

    %% 3. 관계 연결
    A --> B
```

- **역할 명시**: 각 노드의 텍스트에 해당하는 역할을 명시하여, 색상과 역할을 직관적으로 연결할 수 있도록 합니다.

```mermaid
graph TD
    %% 1. 스타일 클래스 정의 (모든 클래스 포함)
    classDef default fill:#444,stroke:#888,color:#ddd
    classDef primary fill:#2E6E9E,stroke:#1C4E7A,color:#fff
    classDef component fill:#3A7D7C,stroke:#2A6D6C,color:#fff
    classDef external fill:#6C4E9A,stroke:#4C2E7A,color:#fff
    classDef db fill:#A86D3A,stroke:#884D1A,color:#fff
    classDef decision fill:#028834,stroke:#015F24,color:#fff
    classDef io fill:#8E44AD,stroke:#6C3483,color:#fff
    classDef warning fill:#994444,stroke:#772222,color:#fff

    %% 2. 노드 선언 (역할과 모양을 함께 명시)
    Start(["프로세스 시작 (Start)"]):::primary
    UserInput[/"사용자 입력 (I/O)"/]:::io
    MainProcess["핵심 로직 처리 (Process)"]:::component
    CheckCondition{"데이터 유효성 검사 (Decision)"}:::decision
    SubModule["내부 모듈 호출 (Process)"]:::component
    UserData[("사용자 DB 조회 (Database)")]:::db
    PaymentGateway["외부 API 호출 (External)"]:::external
    End(["프로세스 종료 (End)"]):::primary
    ErrorState["오류 처리 (Warning)"]:::warning

    %% 3. 관계 연결
    Start --> UserInput
    UserInput --> MainProcess
    MainProcess --> CheckCondition
    CheckCondition -- "Success" --> SubModule
    SubModule --> UserData
    UserData --> PaymentGateway
    PaymentGateway --> End
    CheckCondition -- "Fail" --> ErrorState
```

    MainProcess["핵심 로직 처리 (Process)"]:::component
    CheckCondition{"데이터 유효성 검사 (Decision)"}:::decision
    SubModule["내부 모듈 호출 (Process)"]:::component
    UserData[("사용자 DB 조회 (Database)")]:::db
    PaymentGateway["외부 API 호출 (External)"]:::external
    End(["프로세스 종료 (End)"]):::primary
    ErrorState["오류 처리 (Warning)"]:::warning

    %% 3. 관계 연결
    Start --> UserInput
    UserInput --> MainProcess
    MainProcess --> CheckCondition
    CheckCondition -- "Success" --> SubModule
    SubModule --> UserData
    UserData --> PaymentGateway
    PaymentGateway --> End
    CheckCondition -- "Fail" --> ErrorState

```

```
