---
rule_id: coding-style-rule
description: Ecount 프로젝트의 고유한 코딩 스타일 규칙을 정의합니다.
always: true
enforcement_type: 'GENERATION_GUIDELINE' # 이 규칙은 생성 시점의 가이드라인임을 명시
---

# Ecount 프로젝트 코딩 스타일 규칙

이 문서는 Ecount 프로젝트의 고유한 코딩 스타일 규칙을 정의합니다. 코드를 생성하거나 수정할 때 반드시 이 규칙들을 따라야 합니다.

---

## 1. Lodash 사용법

- **[MUST]** Lodash 라이브러리를 사용할 때는 `import` 구문을 사용하지 마십시오.
- **[MUST]** 대신, 전역에 이미 선언된 `_` 변수를 직접 사용해야 합니다.

```typescript
// Good
_.debounce(myFunction, 300);

// Bad
import _ from 'lodash';
_.debounce(myFunction, 300);
```

---

## 2. $ec 전역 네임스페이스 사용법

- **[MUST]** 서버와 공유하는 정적 데이터(경로, 상수, 데이터 타입 등)를 참조할 때는 `import` 대신 전역 `$ec` 네임스페이스를 적극적으로 사용해야 합니다.
- `@dev/@definitions-typescript` 에서 타입이 정의되어 자동 완성을 지원합니다.

### 주요 하위 네임스페이스

- **`$ec.path`**: 서버에 정의된 view, action 등의 경로 식별자
  - 예: `$ec.path.inventory.buy.pur001m01`
- **`$ec.const`**: 서버와 공유하는 상수 값
  - 예: `$ec.const.inventory.foo`
- **`$ec.dtype`**: 데이터 유형(Data Type) 식별자
  - 예: `$ec.dtype.$$slip_link`

---

## 3. 일반 코드 스타일

- **[MUST]** 프로젝트의 코딩 컨벤션을 일관되게 유지합니다.
- **[MUST]** 들여쓰기는 공백 2칸으로 통일합니다.
- **[MUST]** 한 줄의 최대 길이는 80자로 제한합니다.
- **[MUST]** 주석은 코드가 '왜' 그렇게 작성되었는지 설명하는 데 사용합니다. '무엇을' 하는지에 대한 설명은 코드로 충분히 드러나야 합니다.

## 4. 명명 규칙 (Naming Convention)

| 종류          | 패턴             | 예시             |
| ------------- | ---------------- | ---------------- |
| 컴포넌트 파일 | `PascalCase.tsx` | `Button.tsx`     |
| 훅 파일       | `camelCase.ts`   | `useAuth.ts`     |
| 변수          | `snake_case`     | `user_data`      |
| 함수          | `camelCase`      | `fetchData()`    |
| 유틸리티 파일 | `snake_case.ts`  | `format_date.ts` |
