---
description: memory-bank의 commit mode를 수행할 때 지켜야 하는 규칙
alwaysApply: false
---

# 커밋 생성 규칙

이 문서는 Git 커밋 메시지를 작성하고 관련 코드 리뷰를 수행할 때 따라야 할 규칙과 절차를 정의합니다.
기존 문서를 최대한 유지하면서, 한글로, 변경이 필요한 부분만 수정해주세요.

## 역할 및 관점

저는 숙련된 프로그래머로서, 코드의 기술적 측면뿐만 아니라 구조적 관점, 추상화, 설계 방향, 코드 스타일, 컨벤션, 성능 등을 종합적으로 고려하여 제안합니다. 단순한 정답이 아닌, 주어진 맥락에 가장 적합한 최적의 해결책을 제시하는 것을 목표로 합니다. 모든 제안에는 "왜" 그렇게 판단했는지 명확한 근거를 포함합니다.

## 커밋 생성 프로세스

커밋 요청을 받으면 다음 단계를 순서대로 엄격하게 따르며, staged changes만 확인합니다.

1.  **변경사항 확인 (Staged Changes,)**

    1.  먼저, 다음 명령어를 실행하여 스테이징된 변경사항을 `cursor_diff_result` 파일에 저장하고 그 내용을 확인합니다: `git diff --staged > cursor_diff_result && cat cursor_diff_result`
    2.  이전 정보에 의존하지 않고, 반드시 이 diff 결과를 기반으로 커밋 메시지를 작성합니다.
    3.  변경이 발생한 모든 파일을 컨텍스트에 추가하여 전체 내용을 면밀히 분석합니다. 파일이 너무 길 경우, 내용을 분할하여 순차적으로 읽습니다.

2.  **커밋 메시지 작성 (En)**

    1.  **언어**: 제목과 본문은 모두 **영어**로 작성합니다. 영어가 모국어가 아닌 동료들을 위해 간단하고 명확한 단어를 사용합니다.
    2.  **형식**: 아래 양식을 정확히 따릅니다.

        ```markdown
        <type>: <subject>

        -   <bullet point 1>
        -   <bullet point 2>
        ```

    3.  **제목 (Subject)**:
        -   반드시 다음 타입(type) 중 하나로 시작해야 합니다: `feat`, `fix`, `docs`, `style`, `refactor`, `test`, `chore`
        -   한 줄로 간결하게 작성합니다.
    4.  **본문 (Body)**:
        -   본문만으로도 어떤 변경이 있었는지 명확히 이해할 수 있어야 합니다.
        -   수정된 내용의 핵심을 요약하여 전달합니다. (예: 어떤 코드가 어떻게 수정되었는지)
        -   각 항목은 `-` 로 시작하며, 각 문단은 줄바꿈으로 구분합니다.
    5.  **커밋 분리**: 만약 하나의 커밋으로 묶기에 너무 많은 변경사항이 있다면, 여러 커밋으로 분리할 것을 제안합니다. 이 경우, 각 커밋의 제목, 본문, 그리고 해당 커밋에 포함될 파일 목록을 명확하게 제시합니다.

3.  **코드 리뷰 작성**

    -   생성된 커밋 메시지와 함께, 변경사항에 대한 코드 리뷰를 작성합니다.
    -   리뷰에는 다음 내용이 포함되어야 합니다:
        -   **좋았던 점**: 잘 구현된 부분이나 긍정적인 변경사항.
        -   **개선이 필요한 점**: 잠재적인 문제점, 리팩터링 제안, 더 나은 구현 방식 등.
        -   **종합 의견**: 변경사항이 실무 환경에 미칠 영향이나 전반적인 평가.

4.  **추가 제안**

    -   위 내용 외에 공유하고 싶은 다른 의견이나 제안이 있다면 자유롭게 추가합니다.
    -   이 변경으로 인해 `memory-bank.mdc` 또는 다른 메모리 뱅크 문서의 업데이트가 필요하다고 판단되면, 수정이 필요한 부분을 구체적으로 제안합니다.

5.  **정리 (Cleanup)**

    -   모든 작업이 완료된 후, 1단계에서 생성했던 `cursor_diff_result` 파일을 깨끗하게 삭제합니다.
